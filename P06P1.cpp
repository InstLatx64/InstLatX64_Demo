#include "stdafx.h"
#include "P06P1.h"

extern CPU_Props cpu_props;
extern Args args;

#define P06P1_RETRIES		10
#define P06P1_REPEATS		1000

using namespace std;

#ifdef __cplusplus
extern "C" {
#endif

P06P1_FUNCDEF(BT_RAX_RCX,			CX)
P06P1_FUNCDEF(BTC_RAX_RCX,			CX)
P06P1_FUNCDEF(BTR_RAX_RCX,			CX)
P06P1_FUNCDEF(BTS_RAX_RCX,			CX)
P06P1_FUNCDEF(BZHI_RAX_RAX_RCX,		CX)
P06P1_FUNCDEF(BEXTR_RAX_RAX_RCX,	CX)

P06P1_FUNCDEF(BT_RAX_RCX,			AX)
P06P1_FUNCDEF(BTC_RAX_RCX,			AX)
P06P1_FUNCDEF(BTR_RAX_RCX,			AX)
P06P1_FUNCDEF(BTS_RAX_RCX,			AX)
P06P1_FUNCDEF(BZHI_RAX_RAX_RCX,		AX)
P06P1_FUNCDEF(BEXTR_RAX_RAX_RCX,	AX)

P06P1_FUNCDEF(SHLX_RAX_RAX_RCX,		CX)
P06P1_FUNCDEF(SHL_RAX_CL,			CX)
P06P1_FUNCDEF(SHLX_RAX_RAX_RCX,		AX)
P06P1_FUNCDEF(SHL_RAX_CL,			AX)
P06P1_FUNCDEF(SHL_RAX_IMM8,			AX)
P06P1_FUNCDEF(SHL_RAX_IMPL1,		AX)

P06P1_FUNCDEF(SHRX_RAX_RAX_RCX,		CX)
P06P1_FUNCDEF(SHR_RAX_CL,			CX)
P06P1_FUNCDEF(SHRX_RAX_RAX_RCX,		AX)
P06P1_FUNCDEF(SHR_RAX_CL,			AX)
P06P1_FUNCDEF(SHR_RAX_IMM8,			AX)
P06P1_FUNCDEF(SHR_RAX_IMPL1,		AX)

P06P1_FUNCDEF(SARX_RAX_RAX_RCX,		CX)
P06P1_FUNCDEF(SAR_RAX_CL,			CX)
P06P1_FUNCDEF(SARX_RAX_RAX_RCX,		AX)
P06P1_FUNCDEF(SAR_RAX_CL,			AX)
P06P1_FUNCDEF(SAR_RAX_IMM8,			AX)
P06P1_FUNCDEF(SAR_RAX_IMPL1,		AX)

P06P1_FUNCDEF(RORX_RCX_RCX_IMM8,	CX)
P06P1_FUNCDEF(ROR_RAX_CL,			CX)
P06P1_FUNCDEF(ROR_RAX_CL,			AX)
P06P1_FUNCDEF(ROR_RAX_IMM8,			AX)
P06P1_FUNCDEF(ROR_RAX_IMPL1,		AX)

P06P1_FUNCDEF(ROL_RAX_CL,			CX)
P06P1_FUNCDEF(ROL_RAX_CL,			AX)
P06P1_FUNCDEF(ROL_RAX_IMM8,			AX)
P06P1_FUNCDEF(ROL_RAX_IMPL1,		AX)

P06P1_FUNCDEF(RCR_RAX_CL,			CX)
P06P1_FUNCDEF(RCR_RAX_CL,			AX)
P06P1_FUNCDEF(RCR_RAX_IMM8,			AX)
P06P1_FUNCDEF(RCR_RAX_IMPL1,		AX)

P06P1_FUNCDEF(RCL_RAX_CL,			CX)
P06P1_FUNCDEF(RCL_RAX_CL,			AX)
P06P1_FUNCDEF(RCL_RAX_IMM8,			AX)
P06P1_FUNCDEF(RCL_RAX_IMPL1,		AX)

P06P1_FUNCDEF(ADC_RAX_IMM8,			AX)
P06P1_FUNCDEF(SBB_RAX_IMM8,			AX)

P06P1_FUNCDEF(ADCX_RAX_RCX,			CX)
P06P1_FUNCDEF(ADOX_RAX_RCX,			CX)
P06P1_FUNCDEF(ADCX_RAX_RCX,			AX)
P06P1_FUNCDEF(ADOX_RAX_RCX,			AX)

P06P1_FUNCDEF(CMOVBE_RAX_RCX,		CX)
P06P1_FUNCDEF(CMOVNBE_RAX_RCX,		CX)
P06P1_FUNCDEF(CMOVZ_RAX_RCX,		CX)
P06P1_FUNCDEF(CMOVNZ_RAX_RCX,		CX)

P06P1_FUNCDEF(CMOVBE_RAX_RCX,		AX)
P06P1_FUNCDEF(CMOVNBE_RAX_RCX,		AX)
P06P1_FUNCDEF(CMOVZ_RAX_RCX,		AX)
P06P1_FUNCDEF(CMOVNZ_RAX_RCX,		AX)

P06P1_FUNCDEF(BSWAP_RAX,			AX)
P06P1_FUNCDEF(POPCNT_RCX_RCX,		CX)
P06P1_FUNCDEF(LZCNT_RCX_RCX,		CX)
P06P1_FUNCDEF(TZCNT_RCX_RCX,		CX)

P06P1_FUNCDEF(BSR_RCX_RCX,			CX)
P06P1_FUNCDEF(BSF_RCX_RCX,			CX)

P06P1_FUNCDEF(CRC32_RCX_RCX,		CX)
P06P1_FUNCDEF(PDEP_RAX_RAX_RCX,		CX)
P06P1_FUNCDEF(PEXT_RAX_RAX_RCX,		CX)


#ifdef __cplusplus
}
#endif

measure_methods P06P1_affected[] = {
	P06P1_FUNC("SHLX RAX, RAX, RCX",		SHLX_RAX_RAX_RCX,		CX,	BMI2,	1)
	P06P1_FUNC("SHRX RAX, RAX, RCX",		SHRX_RAX_RAX_RCX,		CX,	BMI2,	1)
	P06P1_FUNC("SARX RAX, RAX, RCX",		SARX_RAX_RAX_RCX,		CX,	BMI2,	1)
	P06P1_FUNC("SHL RAX, CL",				SHL_RAX_CL,				CX,	AMD64,	2)
	P06P1_FUNC("SHR RAX, CL",				SHR_RAX_CL,				CX,	AMD64,	2)
	P06P1_FUNC("SAR RAX, CL",				SAR_RAX_CL,				CX,	AMD64,	2)
	P06P1_FUNC("ROR RAX, CL",				ROR_RAX_CL,				CX,	AMD64,	2)
	P06P1_FUNC("ROL RAX, CL",				ROL_RAX_CL,				CX,	AMD64,	2)
	P06P1_FUNC("BT RAX RCX + ADC RAX,0",	BT_RAX_RCX,				CX, AMD64,	2)
	P06P1_FUNC("BTC RAX RCX",				BTC_RAX_RCX,			CX, AMD64,	1)
	P06P1_FUNC("BTR RAX, RCX",				BTR_RAX_RCX,			CX, AMD64,	1)
	P06P1_FUNC("BTS RAX, RCX",				BTS_RAX_RCX,			CX, AMD64,	1)
	P06P1_FUNC("BZHI RAX, RAX, RCX",		BZHI_RAX_RAX_RCX,		CX, BMI2,	1)
	P06P1_FUNC("BEXTR RAX, RAX, RCX",		BEXTR_RAX_RAX_RCX,		CX, BMI,	2)
};

measure_methods P06P1_unaffected[] = {
	P06P1_FUNC("SHLX RAX, RAX, RCX",		SHLX_RAX_RAX_RCX,		AX,	BMI2,	1)
	P06P1_FUNC("SHRX RAX, RAX, RCX",		SHRX_RAX_RAX_RCX,		AX,	BMI2,	1)
	P06P1_FUNC("SARX RAX, RAX, RCX",		SARX_RAX_RAX_RCX,		AX,	BMI2,	1)
	P06P1_FUNC("RORX RCX, RCX, IMM8",		RORX_RCX_RCX_IMM8,		CX,	BMI2,	1)

	P06P1_FUNC("SHL RAX, CL",				SHL_RAX_CL,				AX,	AMD64,	2)
	P06P1_FUNC("SHR RAX, CL",				SHR_RAX_CL,				AX,	AMD64,	2)
	P06P1_FUNC("SAR RAX, CL",				SAR_RAX_CL,				AX,	AMD64,	2)
	P06P1_FUNC("ROR RAX, CL",				ROR_RAX_CL,				AX,	AMD64,	2)
	P06P1_FUNC("ROL RAX, CL",				ROL_RAX_CL,				AX,	AMD64,	2)
	P06P1_FUNC("RCR RAX, CL",				RCR_RAX_CL,				AX,	AMD64,	7)
	P06P1_FUNC("RCL RAX, CL",				RCL_RAX_CL,				AX,	AMD64,	7)

	P06P1_FUNC("RCR RAX, CL",				RCR_RAX_CL,				CX,	AMD64,	7)
	P06P1_FUNC("RCL RAX, CL",				RCL_RAX_CL,				CX,	AMD64,	7)

	P06P1_FUNC("SHL RAX, IMM8",				SHL_RAX_IMM8,			AX,	AMD64,	1)
	P06P1_FUNC("SHR RAX, IMM8",				SHR_RAX_IMM8,			AX,	AMD64,	1)
	P06P1_FUNC("SAR RAX, IMM8",				SAR_RAX_IMM8,			AX,	AMD64,	1)
	P06P1_FUNC("ROR RAX, IMM8",				ROR_RAX_IMM8,			AX,	AMD64,	1)
	P06P1_FUNC("ROL RAX, IMM8",				ROL_RAX_IMM8,			AX,	AMD64,	1)
	P06P1_FUNC("RCR RAX, IMM8",				RCR_RAX_IMM8,			AX,	AMD64,	7)
	P06P1_FUNC("RCL RAX, IMM8",				RCL_RAX_IMM8,			AX,	AMD64,	7)

	P06P1_FUNC("SHL RAX, IMPL1",			SHL_RAX_IMPL1,			AX,	AMD64,	1)
	P06P1_FUNC("SHR RAX, IMPL1",			SHR_RAX_IMPL1,			AX,	AMD64,	1)
	P06P1_FUNC("SAR RAX, IMPL1",			SAR_RAX_IMPL1,			AX,	AMD64,	1)
	P06P1_FUNC("ROR RAX, IMPL1",			ROR_RAX_IMPL1,			AX,	AMD64,	2)
	P06P1_FUNC("ROL RAX, IMPL1",			ROL_RAX_IMPL1,			AX,	AMD64,	2)
	P06P1_FUNC("RCR RAX, IMPL1",			RCR_RAX_IMPL1,			AX,	AMD64,	3)
	P06P1_FUNC("RCL RAX, IMPL1",			RCL_RAX_IMPL1,			AX,	AMD64,	3)


	P06P1_FUNC("ADC RAX, IMM8",				ADC_RAX_IMM8,			AX,	AMD64,	1)
	P06P1_FUNC("SBB RAX, IMM8",				SBB_RAX_IMM8,			AX,	AMD64,	1)

	P06P1_FUNC("ADCX RAX, RCX",				ADCX_RAX_RCX,			CX,	ADX,	1)
	P06P1_FUNC("ADOX RAX, RCX",				ADOX_RAX_RCX,			CX,	ADX,	1)
	P06P1_FUNC("ADCX RAX, RCX",				ADCX_RAX_RCX,			AX,	ADX,	1)
	P06P1_FUNC("ADOX RAX, RCX",				ADOX_RAX_RCX,			AX,	ADX,	1)

	P06P1_FUNC("CMOVBE RAX, RCX",			CMOVBE_RAX_RCX,			CX, CMOV,	2)
	P06P1_FUNC("CMOVNBE, RAX, RCX",			CMOVNBE_RAX_RCX,		CX, CMOV,	2)
	P06P1_FUNC("CMOVZ RAX, RCX",			CMOVZ_RAX_RCX,			CX, CMOV,	1)
	P06P1_FUNC("CMOVNZ RAX, RCX",			CMOVNZ_RAX_RCX,			CX, CMOV,	1)

	P06P1_FUNC("CMOVBE RAX, RCX",			CMOVBE_RAX_RCX,			AX, CMOV,	2)
	P06P1_FUNC("CMOVNBE, RAX, RCX",			CMOVNBE_RAX_RCX,		AX, CMOV,	2)
	P06P1_FUNC("CMOVZ RAX, RCX",			CMOVZ_RAX_RCX,			AX, CMOV,	1)
	P06P1_FUNC("CMOVNZ RAX, RCX",			CMOVNZ_RAX_RCX,			AX, CMOV,	1)

	P06P1_FUNC("BT RAX RCX + ADC RAX,0",	BT_RAX_RCX,				AX, AMD64,	2)
	P06P1_FUNC("BTC RAX RCX",				BTC_RAX_RCX,			AX, AMD64,	1)
	P06P1_FUNC("BTR RAX, RCX",				BTR_RAX_RCX,			AX, AMD64,	1)
	P06P1_FUNC("BTS RAX, RCX",				BTS_RAX_RCX,			AX, AMD64,	1)
	P06P1_FUNC("BZHI RAX, RAX, RCX",		BZHI_RAX_RAX_RCX,		AX, BMI2,	1)
	P06P1_FUNC("BEXTR RAX, RAX, RCX",		BEXTR_RAX_RAX_RCX,		AX, BMI,	2)

	P06P1_FUNC("BSWAP RAX",					BSWAP_RAX,				AX,	AMD64,	2)
	P06P1_FUNC("POPCNT RCX, RCX",			POPCNT_RCX_RCX,			CX,	POPCNT,	1)
	P06P1_FUNC("LZCNT RCX, RCX",			LZCNT_RCX_RCX,			CX,	ABM,	1)
	P06P1_FUNC("TZCNT RCX, RCX",			TZCNT_RCX_RCX,			CX,	BMI,	1)

	P06P1_FUNC("BSR RCX, RCX",				BSR_RCX_RCX,			CX,	AMD64,	1)
	P06P1_FUNC("BSF RCX, RCX",				BSF_RCX_RCX,			CX,	AMD64,	1)

	P06P1_FUNC("CRC32 RCX, RCX",			CRC32_RCX_RCX,			CX,	SSE42,	1)
	P06P1_FUNC("PDEP RAX, RAX, RCX",		PDEP_RAX_RAX_RCX,		CX,	BMI2,	1)
	P06P1_FUNC("PEXT RAX, RAX, RCX",		PEXT_RAX_RAX_RCX,		CX,	BMI2,	1)
};

void P0601_Time(measure_methods * m, int method, int testcase) {
	unsigned __int64 minres = ULONG_MAX;

	(m[method].func[testcase])();
	for (int retry = 0; retry < P06P1_RETRIES; retry++) {
		minres = min(minres, (m[method].func[testcase])());
	}
	cout << '\t' << setw(6) << right << (int)((double)minres / (double)P06P1_REPEATS);
}

void P0601(measure_methods * m, int instcount) {
	cout << "TSC CLKs:--------------------------------\t -1025\t -1024\t  -513\t  -512\t   511\t   512\t  1023\t  1024 (#uop)" << endl;

	for (int b = 0; b < instcount; b++) {
		cout << dec << setw(2) << b << ':';
		cout << left << setw(INSTNAMELEN) << m[b].inst << ' ';
		cout << left << setw(INITLEN) << m[b].init << ": ";
		for (int t = 0; t < TESTCASE; t++) {
			if ((cpu_props.IsFeat(m[b].feats)) && (m[b].func[t] != NULL))
				P0601_Time(m, b, t);
		}
		cout << "   (" << m[b].uopscount << ')' <<  endl;
	}
}

void P0601_Test(void) {
	SetThread(args.GetThreadIndex(cpu_props));
	cout << "Affected Instructions:" << endl;
	P0601(P06P1_affected, sizeof(P06P1_affected) / sizeof(measure_methods));

	cout << "Unaffected Instructions:" << endl;
	P0601(P06P1_unaffected, sizeof(P06P1_unaffected) / sizeof(measure_methods));
}