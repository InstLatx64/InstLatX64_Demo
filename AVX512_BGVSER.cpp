#include "stdafx.h"
#include "conio.h"
#include "AVX512_BGVSER.h"

using namespace std;

//BSLLI-BSRLI 
//vpbroadcastb	zmm1, rax			;P5
//mov			rcx, -1				;P0156B
//shlx			rcx, rcx, rax		;P06
//kmovq			k1, rcx				;P5
//vpaddb		zmm1, [disp]		;P05+P23A
//vpermb		zmm0 {k1}{z}, zmm0	;P5
//
//7 uops: P0156B+P06+3*P5+P23A+P05

__m256i _mm256_bslli_epi256(__m256i a, int b) {
	const __m256i disp = _mm256_setr_epi8(
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
		0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f);
	__m256i idx = _mm256_sub_epi8(disp, _mm256_set1_epi8(b));
	return _mm256_maskz_permutexvar_epi8(~0UL << b, idx, a);
}

__m256i _mm256_bsrli_epi256(__m256i a, int b) {
	const __m256i disp = _mm256_setr_epi8(
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
		0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f);
	__m256i idx = _mm256_add_epi8(disp, _mm256_set1_epi8(b));
	return _mm256_maskz_permutexvar_epi8(~0UL >> b, idx, a);
}

__m256i _mm256_palignr_epi256(__m256i a, __m256i b, int c) {
	const __m256i disp = _mm256_setr_epi8(
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
		0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f);
	__m256i idx = _mm256_add_epi8(disp, _mm256_set1_epi8(c));
	return _mm256_permutex2var_epi8(a, idx, b);
}

__m256i _mm256_palignl_epi256(__m256i a, __m256i b, int c) {
	const __m256i disp = _mm256_setr_epi8(
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
		0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f);
	__m256i idx = _mm256_sub_epi8(disp, _mm256_set1_epi8(c));
	return _mm256_permutex2var_epi8(a, idx, b);
}

__m256i _mm256_rotater_epi256(__m256i a, int c) {
	const __m256i disp = _mm256_setr_epi8(
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
		0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f);
	__m256i idx = _mm256_add_epi8(disp, _mm256_set1_epi8(c));
	return _mm256_permutexvar_epi8(idx, a);
}

__m256i _mm256_rotatel_epi256(__m256i a, int c) {
	const __m256i disp = _mm256_setr_epi8(
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
		0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f);
	__m256i idx = _mm256_sub_epi8(disp, _mm256_set1_epi8(c));
	return _mm256_permutexvar_epi8(idx, a);
}

__m512i _mm512_bslli_epi512(__m512i a, int b) {
	const __m512i disp = _mm512_setr_epi8(
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
		0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
		0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f);
	__m512i idx = _mm512_sub_epi8(disp, _mm512_set1_epi8(b));
	return _mm512_maskz_permutexvar_epi8(~0ULL << b, idx, a);
}

__m512i _mm512_bsrli_epi512(__m512i a, int b) {
	const __m512i disp = _mm512_setr_epi8(
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
		0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
		0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f);
	__m512i idx = _mm512_add_epi8(disp, _mm512_set1_epi8(b));
	return _mm512_maskz_permutexvar_epi8(~0ULL >> b, idx, a);
}

__m512i _mm512_palignr_epi512(__m512i a, __m512i b, int c) {
	const __m512i disp = _mm512_setr_epi8(
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
		0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
		0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f);
	__m512i idx = _mm512_add_epi8(disp, _mm512_set1_epi8(c));
	return _mm512_permutex2var_epi8(a, idx, b);
}

__m512i _mm512_palignl_epi512(__m512i a, __m512i b, int c) {
	const __m512i disp = _mm512_setr_epi8(
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
		0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
		0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f);
	__m512i idx = _mm512_sub_epi8(disp, _mm512_set1_epi8(c));
	return _mm512_permutex2var_epi8(a, idx, b);
}

__m512i _mm512_rotater_epi512(__m512i a, int c) {
	const __m512i disp = _mm512_setr_epi8(
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
		0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
		0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f);
	__m512i idx = _mm512_add_epi8(disp, _mm512_set1_epi8(c));
	return _mm512_permutexvar_epi8(idx, a);
}

__m512i _mm512_rotatel_epi512(__m512i a, int c) {
	const __m512i disp = _mm512_setr_epi8(
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
		0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
		0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f);
	__m512i idx = _mm512_sub_epi8(disp, _mm512_set1_epi8(c));
	return _mm512_permutexvar_epi8(idx, a);
}

#pragma warning(disable : 4309)
void YMM_Test(void) {
	const __m256i testdata0 = _mm256_setr_epi8(
		0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
		0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f);
	const __m256i testdata1 = _mm256_setr_epi8(
		0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
		0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f);

	cout << "_mm256_bslli_epi256" <<  endl;
	for (int i = 0; i < 32; i++) {
		printRes(i, _mm256_bslli_epi256(testdata0, i));
	}

	cout << "_mm256_bsrli_epi256" <<  endl;
	for (int i = 0; i < 32; i++) {
		printRes(i, _mm256_bsrli_epi256(testdata0, i));
	}

	cout << "_mm256_palignr_epi256" <<  endl;
	for (int i = 0; i < 32; i++) {
		printRes(i, _mm256_palignr_epi256(testdata0, testdata1, i));
	}

	cout << "_mm256_palignl_epi256" <<  endl;
	for (int i = 0; i < 32; i++) {
		printRes(i, _mm256_palignl_epi256(testdata1, testdata0, i));
	}

	cout << "_mm256_rotater_epi256" <<  endl;
	for (int i = 0; i < 32; i++) {
		printRes(i, _mm256_rotater_epi256(testdata1, i));
	}

	cout << "_mm256_rotatel_epi256" <<  endl;
	for (int i = 0; i < 32; i++) {
		printRes(i, _mm256_rotatel_epi256(testdata1, i));
	}
}

void ZMM_Test(void) {
	const __m512i testdata0 = _mm512_setr_epi8(
		0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
		0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
		0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
		0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f);
	const __m512i testdata1 = _mm512_setr_epi8(
		0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,
		0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,
		0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,
		0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf);

	cout << "_mm512_bslli_epi512" <<  endl;
	for (int i = 0; i < 64; i++) {
		printRes(i, _mm512_bslli_epi512(testdata0, i));
	}

	cout << "_mm512_bsrli_epi512" <<  endl;
	for (int i = 0; i < 64; i++) {
		printRes(i, _mm512_bsrli_epi512(testdata0, i));
	}

	cout << "_mm512_palignr_epi512" <<  endl;
	for (int i = 0; i < 64; i++) {
		printRes(i, _mm512_palignr_epi512(testdata0, testdata1, i));
	}

	cout << "_mm512_palignl_epi512" <<  endl;
	for (int i = 0; i < 64; i++) {
		printRes(i, _mm512_palignl_epi512(testdata1, testdata0, i));
	}

	cout << "_mm512_rotater_epi512" <<  endl;
	for (int i = 0; i < 64; i++) {
		printRes(i, _mm512_rotater_epi512(testdata1, i));
	}

	cout << "_mm512_rotatel_epi512" <<  endl;
	for (int i = 0; i < 64; i++) {
		printRes(i, _mm512_rotatel_epi512(testdata1, i));
	}

}

void AVX512_BGVSER_Test(void) {
	YMM_Test();
	ZMM_Test();
}

#pragma warning(default : 4309)
